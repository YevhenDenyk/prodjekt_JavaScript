// // Робота з помилками

// try {
//     `потенційно небезпечний код`
// } catch (e) {
//     console.error(e);
//     `виводить отриману помилку та продовжує виконувати наступний код`
// } finally {
//     `виконається в тому чи іншому випадку`
// }

// let users = undefined
// users?.name?.fn
// - перевіряється умова наявності елемента/властивості, якщо вона відчутня помилка не виникає.



//     // Дестректуризація


// Можна запаковувати глобальні змінні у об'єкт, їх назви повинні співпадати
// let name = `vasya`;
// let age = 50;
// let user = {
//     name,
//     age,
//     foo(){
//         console.log(this);
//     }
// }

// //Можна витягувати змінні з об'єкту та робити глобальні зміні, назви повинні співпадати
// let user = {
//     name: `vasya`
//     age: 44
//     foo(){
//         console.log(this);
//     }
// }
// let {name} = user;
// let {age} = user;
// console.log(age);
// let {name, foo, age} = user;

// let {name:userName} = user; - `Звернутися та переназвати ішим ім'ям`



// Витягнути змінні з масиву та зробити їх глобальними, брегігається порядок
// let [a, b, , d] = [11, 22, 33, 44];


// // Копіювання об'єктів, створення нового з аналогчним наповненням, поверхнева копія
// let user = { name:`vdv`, sdv: 65}
// let userCopy = {...user};
// let arr = [123, 124, 345];
// let wer = [...arr];

// Повноцінний клон із всіма новими посиланнями
// let s = JSON.stringify(user)  - перетворює на ДЖЕУСОН стрінгу, але видаляються всі поведінки( фунції)
// let parse = JSON.parse(s) -  перетворює зі трінги назад



// Конструктор для створення об'єкту
